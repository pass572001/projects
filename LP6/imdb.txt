import pandas as pd
import numpy as np

from keras.datasets import imdb

(X_train, Y_train), (X_test, Y_test) = imdb.load_data(num_words=10000)

X_train[0]

Y_train[0]

word_index = imdb.get_word_index()
reverse_word_index = dict([(value,key) for (key,value) in word_index.items()])
decoded_review = ' '.join([reverse_word_index.get(i-3,'?') for i in X_train[0]] )

decoded_review

def vectorize_seq(seq, dim=10000):
    results = np.zeros((len(seq), dim))
    for i, seq in enumerate(seq):
        results[i, seq] = 1
    return results

xtr = vectorize_seq(X_train)
xte = vectorize_seq(X_test)

xtr[0]

ytr = np.asarray(Y_train).astype('float32')
yte = np.asarray(Y_test).astype('float32')

from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

xval = xtr[:10000]
partial_xtr = xtr[10000:]

yval = ytr[:10000]
partial_ytr = ytr[10000:]

history = model.fit(partial_xtr, partial_ytr, epochs=20, batch_size=512, validation_data=(xval,yval))

loss, accuracy = model.evaluate(xte,yte)
print(accuracy)

model.predict(xte)


